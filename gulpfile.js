// 核心文件gulp
const gulp = require('gulp');
// html压缩
const htmlmin = require('gulp-htmlmin');
// HTMLMIN属性
const htmlminOption = {
    caseSensitive: true,//以区分大小写的方式处理属性（用于自定义HTML标记）
    collapseBooleanAttributes: false,//忽略来自布尔属性的属性值
    collapseInlineTagWhitespace: false,//display: inline; 折叠时，不要在元素之间留下任何空格。必须与...一起使用collapseWhitespace = true	
    collapseWhitespace: false,//折叠有助于文档树中文本节点的空白区域	
    conservativeCollapse: false,//总是折叠空间（永远不要完全删除它）。必须与...一起使用collapseWhitespace = true	
    //customAttrAssign:[],//允许支持自定义属性赋值表达式的正则表达式数组（例如'<div flex?="{{mode != cover}}"></div>'）
    customAttrCollapse: true,//正则表达式，指定自定义属性以从中删除换行符（例如/ng-class/）
    customAttrSurround: true,//允许支持自定义属性环绕表达式的正则表达式数组（例如<input { { #if value} }checked="checked"{{/if}}>）	[ ]
    customEventAttributes: true,//允许支持自定义事件属性的正则表达式数组minifyJS（例如ng - click）[/^on[a-z]{3,}$/]
    decodeEntities: true,//尽可能使用直接Unicode字符
    html5: true,//	根据HTML5规范解析输入	
    //ignoreCustomComments:[/^!/]//一组正则表达式，允许在匹配时忽略某些注释
    //ignoreCustomFragments:[ /<%[\s\S]*?%>/, /<\?[\s\S]*?\?>/ ]//regex'es允许忽略某些片段的阵列，当一致时（例如<?php ... ?>，{{ ... }}等）	
    includeAutoGeneratedTags: true,//插入由HTML解析器生成的标签	
    keepClosingSlash: true,//保留单身元素上的尾部斜线
    //maxLineLength	指定最大行长度。压缩输出将在有效HTML分割点处按换行符分割
    //minifyCSS	在样式元素和样式属性中使用CSS（使用clean - css）	false（可能是true，Object，Function(text, type) ）
    minifyJS: false,//脚本元素和事件属性中的JavaScript最小化（使用UglifyJS）（可能是true，Object，Function(text, inline) ）
    minifyURLs: false,//将各种属性中的URL 缩小（使用relateurl）（可能是String，Object，Function(text) ）
    preserveLineBreaks: true,//	当标签之间的空格包括换行符时，总是折叠为1个换行符（从不完全删除）。必须与...一起使用collapseWhitespace = true	false
    preventAttributesEscaping: true,//防止转义属性的值	
    processConditionalComments: false,//通过缩小器处理条件注释的内容	
    //processScripts:[],//对应于类型脚本的元素串的阵列通过minifier处理（例如text / ng - template，text / x - handlebars - template等）
    //quoteCharacter://用于属性值（'或“）的报价类型	
    removeAttributeQuotes: false,//尽可能删除属性周围的引号
    //removeComments:false//去除HTML评论	
    removeEmptyAttributes: false,//使用仅包含空白的值删除所有属性	false（可以true，Function(attrName, tag) ）
    removeEmptyElements: false,//删除空白内容的所有元素	
    removeOptionalTags: false,//删除可选标签	
    removeRedundantAttributes: true,//当值匹配默认值时删除属性。	
    removeScriptTypeAttributes: true,//type = "text/javascript"从script标签中移除。其他type属性值保持不变	
    removeStyleLinkTypeAttributes: true,//删除type = "text/css"从style和link标签。其他type属性值保持不变	
    removeTagWhitespace: false//尽可能删除属性之间的空间。请注意，这将导致HTML无效！	
    //sortAttributes://		false按频率排序属性
    //sortClassName	按频率排序样式类别	false
    //trimCustomFragments	修剪左右的空白区域ignoreCustomFragments。	false
    //useShortDoctype	doctype用简短的（HTML5）文档替换	false
}
// HTML属性配置备份
const htmlminOptionBak = {
    removeComments: true, //清除HTML注释
    collapseWhitespace: true, //压缩HTML
    collapseBooleanAttributes: true, //省略布尔属性的值 <input checked="true"/> ==> <input />
    removeEmptyAttributes: true, //删除所有空格作属性值 <input id="" /> ==> <input />
    removeScriptTypeAttributes: true, //删除<script>的type="text/javascript"
    removeStyleLinkTypeAttributes: true, //删除<style>和<link>的type="text/css"
    minifyJS: true, //压缩页面JS
    minifyCSS: true //压缩页面CSS
};

// 错误阻止插件
const plumber = require('gulp-plumber');
// 代码改动后里浏览器自动刷新HTML,CSS,JS插件
const browserSync = require('browser-sync').create();
// 源代码根目录
const PROJECT_DIR = "./src/";
//输出目录
const PROJECT_BUILD = "./build/";
// html或者htm监听
gulp.task('html', () => {
    return (
        gulp.src([`${PROJECT_DIR}/*.html`, `${PROJECT_DIR}/*.htm`])
            .pipe(plumber())
            .pipe(htmlmin(htmlminOption))
            .pipe(gulp.dest(PROJECT_BUILD))
    )
});
// CSS监听处理
// SASS处理
const sass = require('gulp-ruby-sass');
gulp.src("./src/less/*.less")


gulp.task('sass', () => {
    return (
        gulp.src(`${PROJECT_DIR}/*.scss`)
            .pipe(plumber())
            .pipe(sass())
            .pipe(gulp.dest(`${PROJECT_BUILD}/css/`))
    )
}

);
// 静态服务器 + 监听 html,css ,js 文件
// gulp.task('serve', ['html', 'less', 'js', 'images'], function () {
//     browserSync.init({
//         server: "./build/",
//         port: "1111"
//     });
//     // 监听 html
//     gulp.watch('./src/*.html', ['html'])
//     // 监听 scss
//     gulp.watch('./src/less/*.less', ['less']);
//     // 监听 images
//     gulp.watch('./src/images/*.{png,jpg,gif,svg}', ['images']);
//     // 监听 js
//     gulp.watch('./src/js/*.js', ['js']);
// });

// gulp.task('default', function () {

// });

